###
##. Configuration
###

MVN_EXECUTABLE?=$(shell command -v mvn || which mvn 2>/dev/null)
ifeq ($(MVN_EXECUTABLE),)
$(error Please install maven.)
endif


###
## Maven
###

#. See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference

###
#. Goals for the clean lifecycle
###
# execute processes needed prior to the actual project cleaning
pre-clean:
	$(MVN_EXECUTABLE) pre-clean
# remove all files generated by the previous build
clean:
	$(MVN_EXECUTABLE) clean
# execute processes needed to finalize the project cleaning
post-clean:
	$(MVN_EXECUTABLE) post-clean

###
#. Goals for the default lifecycle
###
# validate the project is correct and all necessary information is available.
validate:
	$(MVN_EXECUTABLE) validate

# initialize build state, e.g. set properties or create directories.
initialize:
	$(MVN_EXECUTABLE) initialize

# generate any source code for inclusion in compilation.
generate-sources:
	$(MVN_EXECUTABLE) generate-sources

# process the source code, for example to filter any values.
process-sources:
	$(MVN_EXECUTABLE) process-sources

# generate resources for inclusion in the package.
generate-resources:
	$(MVN_EXECUTABLE) generate-resources

# copy and process the resources into the destination directory, ready for packaging.
process-resources:
	$(MVN_EXECUTABLE) process-resources

# compile the source code of the project.
compile:
	$(MVN_EXECUTABLE) compile

# post-process the generated files from compilation, for example to do bytecode enhancement on Java classes.
process-classes:
	$(MVN_EXECUTABLE) process-classes

# generate any test source code for inclusion in compilation.
generate-test-sources:
	$(MVN_EXECUTABLE) generate-test-sources

# process the test source code, for example to filter any values.
process-test-sources:
	$(MVN_EXECUTABLE) process-test-sources

# create resources for testing.
generate-test-resources:
	$(MVN_EXECUTABLE) generate-test-resources

# copy and process the resources into the test destination directory.
process-test-resources:
	$(MVN_EXECUTABLE) process-test-resources

# compile the test source code into the test destination directory
test-compile:
	$(MVN_EXECUTABLE) test-compile

# post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes.
process-test-classes:
	$(MVN_EXECUTABLE) process-test-classes

# run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed.
test:
	$(MVN_EXECUTABLE) test

# perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package.
prepare-package:
	$(MVN_EXECUTABLE) prepare-package

# take the compiled code and package it in its distributable format, such as a JAR.
package:
	$(MVN_EXECUTABLE) package

# perform actions required before integration tests are executed. This may involve things such as setting up the required environment.
pre-integration-test:
	$(MVN_EXECUTABLE) pre-integration-test

# process and deploy the package if necessary into an environment where integration tests can be run.
integration-test::
	$(MVN_EXECUTABLE) integration-test

# perform actions required after integration tests have been executed. This may including cleaning up the environment.
post-integration-test:
	$(MVN_EXECUTABLE) post-integration-test

# run any checks to verify the package is valid and meets quality criteria.
verify:
	$(MVN_EXECUTABLE) verify

# install the package into the local repository, for use as a dependency in other projects locally.
install:
	$(MVN_EXECUTABLE) install

# done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.
deploy:
	$(MVN_EXECUTABLE) deploy

###
#. Goals for the site lifecycle
###
# execute processes needed prior to the actual project site generation
pre-site:
	$(MVN_EXECUTABLE) pre-site
# generate the project's site documentation
site:
	$(MVN_EXECUTABLE) site
# execute processes needed to finalize the site generation, and to prepare for site deployment
post-site:
	$(MVN_EXECUTABLE) post-site
# deploy the generated site documentation to the specified web server
site-deploy:
	$(MVN_EXECUTABLE) site-deploy


#. Common maven executions
# Run mvn clean install
clean-install:
	$(MVN_EXECUTABLE) clean install
