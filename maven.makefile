###
##. Configuration
###

MVN?=$(shell command -v mvn || which mvn 2>/dev/null)
ifeq ($(MVN),)
$(error Please install maven.)
endif

###
## Maven
###

#. See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference

###
##. Goals for the clean lifecycle
###

# Execute processes needed prior to the actual project cleaning
pre-clean:
	@$(MVN) pre-clean

# Remove all files generated by the previous build
clean:
	@$(MVN) clean

# Execute processes needed to finalize the project cleaning
post-clean:
	@$(MVN) post-clean

###
##. Goals for the default lifecycle
###

# Validate the project is correct and all necessary information is available.
validate:
	@$(MVN) validate

# Initialize build state, e.g. set properties or create directories.
initialize:
	@$(MVN) initialize

# Generate any source code for inclusion in compilation.
generate-sources:
	@$(MVN) generate-sources

# Process the source code, for example to filter any values.
process-sources:
	@$(MVN) process-sources

# Generate resources for inclusion in the package.
generate-resources:
	@$(MVN) generate-resources

# Copy and process the resources into the destination directory, ready for packaging.
process-resources:
	@$(MVN) process-resources

# Compile the source code of the project.
compile:
	@$(MVN) compile

# Post-process the generated files from compilation, for example to do bytecode enhancement on Java classes.
process-classes:
	@$(MVN) process-classes

# Generate any test source code for inclusion in compilation.
generate-test-sources:
	@$(MVN) generate-test-sources

# Process the test source code, for example to filter any values.
process-test-sources:
	@$(MVN) process-test-sources

# Create resources for testing.
generate-test-resources:
	@$(MVN) generate-test-resources

# Copy and process the resources into the test destination directory.
process-test-resources:
	@$(MVN) process-test-resources

# Compile the test source code into the test destination directory
test-compile:
	@$(MVN) test-compile

# Post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes.
process-test-classes:
	@$(MVN) process-test-classes

# Run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed.
test:
	@$(MVN) test

# Perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package.
prepare-package:
	@$(MVN) prepare-package

# Take the compiled code and package it in its distributable format, such as a JAR.
package:
	@$(MVN) package

# Perform actions required before integration tests are executed. This may involve things such as setting up the required environment.
pre-integration-test:
	@$(MVN) pre-integration-test

# Process and deploy the package if necessary into an environment where integration tests can be run.
integration-test::
	@$(MVN) integration-test

# Perform actions required after integration tests have been executed. This may including cleaning up the environment.
post-integration-test:
	@$(MVN) post-integration-test

# Run any checks to verify the package is valid and meets quality criteria.
verify:
	@$(MVN) verify

# Install the package into the local repository, for use as a dependency in other projects locally.
install:
	@$(MVN) install

# Done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.
deploy:
	@$(MVN) deploy

###
##. Goals for the site lifecycle
###

# Execute processes needed prior to the actual project site generation
pre-site:
	@$(MVN) pre-site

# Generate the project's site documentation
site:
	@$(MVN) site

# Execute processes needed to finalize the site generation, and to prepare for site deployment
post-site:
	@$(MVN) post-site

# Deploy the generated site documentation to the specified web server
site-deploy:
	@$(MVN) site-deploy

###
##. Common maven executions
###

# Run mvn clean install
clean-install:
	@$(MVN) clean install
